状态模式定义:
    状态(State)）模式，又称状态对象(Pattern of Objects for States)模式，是一种对象的行为模式。
    状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。
    状态模式的本质：根据状态来分离和选择行为
状态模式角色:
    环境(Context)角色:也称上下文,通常用来定义客户端感兴趣的接口，同时维护一个来具体处理当前状态的对象示例。
    抽象状态(State)角色：定义一个接口，用来封装与环境（Context）对象的一个特定的状态所对应的行为。
    具体状态(ConcreteState)角色：每一个具体状态类都实现了一个跟环境（Context）相关的状态的具体处理。
状态模式优缺点:
    优点:
        （1）简化应用逻辑控制
        状态模式使用单独的类来封装一个状态的处理，可以把负责逻辑控制的代码分散到单独的状态类中去，这样就把着眼点从执行状态提高到整个对象的状态，使得代码结构化和意图更清晰，从而简化应用的逻辑控制。
        （2）更好地分离状态和行为
        状态模式通过设置所有状态类的公共接口，把状态和状态对应的行为分离开，把所有与一个特定的状态相关的行为都放入一个对象中，使得应用程序在控制的时候，只需要关心状态的切换，而不用关心这个状态对应的真正处理。
        （3）更好的扩展性
        引入了状态处理的公共接口后，使得扩展新的状态变得非常容易，只需要新增加一个实现状态处理的公共接口的实现类，然后在进行状态维护的地方，设置状态变化到这个新的状态即可。
        （4）显式化进行状态转换
        状态模式为不同的状态引入独立的对象，使得状态的转换变得更加明确。而且状态对象可以保证上下文不会发生内部状态不一致的情况，因为上下文中只有一个变量来记录状态对象，只要为这一个变量赋值就可以了。
    缺点：
        一个状态对应一个状态处理类，会使得程序引入太多的状态类，这样程序变得杂乱。